name: android-apk

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ANDROID_HOME: ${{ github.workspace }}/android-sdk
      ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
      NDK_VERSION: 25.2.9519653
    steps:
      - uses: actions/checkout@v4

      - name: Install Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo builds
        uses: Swatinem/rust-cache@v2

      - name: Install Android Rust targets
        run: rustup target add aarch64-linux-android armv7-linux-androideabi i686-linux-android x86_64-linux-android

      - name: Install dioxus CLI
        run: cargo install dioxus-cli --version 0.7.0-rc.1

      - name: Install Android SDK components
        run: |
          mkdir -p "$ANDROID_HOME/cmdline-tools"
          curl -sSL https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -o cmdline-tools.zip
          unzip -q cmdline-tools.zip -d "$ANDROID_HOME/cmdline-tools"
          mv "$ANDROID_HOME/cmdline-tools/cmdline-tools" "$ANDROID_HOME/cmdline-tools/latest"
          rm cmdline-tools.zip
          export PATH="$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/emulator:$PATH"
          echo "$ANDROID_HOME/cmdline-tools/latest/bin" >> "$GITHUB_PATH"
          echo "$ANDROID_HOME/platform-tools" >> "$GITHUB_PATH"
          echo "$ANDROID_HOME/emulator" >> "$GITHUB_PATH"
          yes | sdkmanager --licenses
          sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0" "ndk;$NDK_VERSION" "cmake;3.22.1"

      - name: Generate debug keystore
        run: |
          mkdir -p "$HOME/.android"
          if [ ! -f "$HOME/.android/debug.keystore" ]; then
            keytool -genkeypair \
              -keystore "$HOME/.android/debug.keystore" \
              -storepass android \
              -keypass android \
              -alias androiddebugkey \
              -dname "CN=Android Debug,O=Android,C=US" \
              -keyalg RSA \
              -keysize 2048 \
              -validity 10000
          fi

      - name: Export NDK environment variables
        run: |
          echo "NDK_HOME=$ANDROID_HOME/ndk/$NDK_VERSION" >> "$GITHUB_ENV"
          echo "ANDROID_NDK_HOME=$ANDROID_HOME/ndk/$NDK_VERSION" >> "$GITHUB_ENV"
          echo "$ANDROID_HOME/ndk/$NDK_VERSION" >> "$GITHUB_PATH"

      - name: Build Android bundle
        working-directory: pubky-swiss-knife
        run: dx bundle --android --release --json-output

      - name: Locate Android project
        id: locate-android
        run: |
          GRADLEW_PATH=$(find pubky-swiss-knife/target/dx -maxdepth 6 -type f -name gradlew -print -quit)
          if [ -z "$GRADLEW_PATH" ]; then
            echo "Unable to find generated Android project" >&2
            exit 1
          fi
          ANDROID_DIR=$(dirname "$GRADLEW_PATH")
          echo "dir=$ANDROID_DIR" >> "$GITHUB_OUTPUT"

      - name: Assemble release APK
        working-directory: ${{ steps.locate-android.outputs.dir }}
        run: |
          chmod +x gradlew
          ./gradlew assembleRelease --console=plain

      - name: Locate APK
        id: locate-apk
        run: |
          SEARCH_DIR="${{ steps.locate-android.outputs.dir }}/app/build/outputs/apk/release"
          if [ ! -d "$SEARCH_DIR" ]; then
            echo "Unable to find APK output directory at $SEARCH_DIR" >&2
            exit 1
          fi
          APK_PATH=$(find "$SEARCH_DIR" -name "*-unsigned.apk" -print -quit)
          if [ -z "$APK_PATH" ]; then
            echo "No APK produced" >&2
            exit 1
          fi
          echo "apk=$APK_PATH" >> "$GITHUB_OUTPUT"

      - name: Align and sign APK
        id: sign-apk
        run: |
          INPUT_APK="${{ steps.locate-apk.outputs.apk }}"
          ALIGNED_APK="${INPUT_APK%.apk}-aligned.apk"
          SIGNED_APK="${INPUT_APK%-unsigned.apk}-signed.apk"
          "$ANDROID_HOME/build-tools/34.0.0/zipalign" -f 4 "$INPUT_APK" "$ALIGNED_APK"
          "$ANDROID_HOME/build-tools/34.0.0/apksigner" sign \
            --ks "$HOME/.android/debug.keystore" \
            --ks-pass pass:android \
            --key-pass pass:android \
            --out "$SIGNED_APK" \
            "$ALIGNED_APK"
          "$ANDROID_HOME/build-tools/34.0.0/apksigner" verify "$SIGNED_APK"
          echo "apk=$SIGNED_APK" >> "$GITHUB_OUTPUT"

      - name: Upload release APK
        uses: actions/upload-artifact@v4
        with:
          name: pubky-swiss-knife-apk
          path: ${{ steps.sign-apk.outputs.apk }}
